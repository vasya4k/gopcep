// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pceapi.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StartBGPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartBGPRequest) Reset()         { *m = StartBGPRequest{} }
func (m *StartBGPRequest) String() string { return proto.CompactTextString(m) }
func (*StartBGPRequest) ProtoMessage()    {}
func (*StartBGPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{0}
}
func (m *StartBGPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBGPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBGPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBGPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBGPRequest.Merge(m, src)
}
func (m *StartBGPRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartBGPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBGPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartBGPRequest proto.InternalMessageInfo

type StartBGPReplay struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartBGPReplay) Reset()         { *m = StartBGPReplay{} }
func (m *StartBGPReplay) String() string { return proto.CompactTextString(m) }
func (*StartBGPReplay) ProtoMessage()    {}
func (*StartBGPReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{1}
}
func (m *StartBGPReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBGPReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBGPReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBGPReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBGPReplay.Merge(m, src)
}
func (m *StartBGPReplay) XXX_Size() int {
	return m.Size()
}
func (m *StartBGPReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBGPReplay.DiscardUnknown(m)
}

var xxx_messageInfo_StartBGPReplay proto.InternalMessageInfo

type StopBGPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopBGPRequest) Reset()         { *m = StopBGPRequest{} }
func (m *StopBGPRequest) String() string { return proto.CompactTextString(m) }
func (*StopBGPRequest) ProtoMessage()    {}
func (*StopBGPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{2}
}
func (m *StopBGPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopBGPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopBGPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopBGPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopBGPRequest.Merge(m, src)
}
func (m *StopBGPRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopBGPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopBGPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopBGPRequest proto.InternalMessageInfo

type StopBGPReplay struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopBGPReplay) Reset()         { *m = StopBGPReplay{} }
func (m *StopBGPReplay) String() string { return proto.CompactTextString(m) }
func (*StopBGPReplay) ProtoMessage()    {}
func (*StopBGPReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{3}
}
func (m *StopBGPReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopBGPReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopBGPReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopBGPReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopBGPReplay.Merge(m, src)
}
func (m *StopBGPReplay) XXX_Size() int {
	return m.Size()
}
func (m *StopBGPReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_StopBGPReplay.DiscardUnknown(m)
}

var xxx_messageInfo_StopBGPReplay proto.InternalMessageInfo

type SessionsRequest struct {
	PccName              string   `protobuf:"bytes,1,opt,name=pccName,proto3" json:"pccName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionsRequest) Reset()         { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()    {}
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{4}
}
func (m *SessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsRequest.Merge(m, src)
}
func (m *SessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsRequest proto.InternalMessageInfo

func (m *SessionsRequest) GetPccName() string {
	if m != nil {
		return m.PccName
	}
	return ""
}

type Session struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MsgCount             uint64   `protobuf:"varint,2,opt,name=MsgCount,proto3" json:"MsgCount,omitempty"`
	State                int32    `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Keepalive            uint32   `protobuf:"varint,5,opt,name=Keepalive,proto3" json:"Keepalive,omitempty"`
	DeadTimer            uint32   `protobuf:"varint,6,opt,name=DeadTimer,proto3" json:"DeadTimer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{5}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Session) GetMsgCount() uint64 {
	if m != nil {
		return m.MsgCount
	}
	return 0
}

func (m *Session) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Session) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Session) GetKeepalive() uint32 {
	if m != nil {
		return m.Keepalive
	}
	return 0
}

func (m *Session) GetDeadTimer() uint32 {
	if m != nil {
		return m.DeadTimer
	}
	return 0
}

type SessionsReply struct {
	Sessions             []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SessionsReply) Reset()         { *m = SessionsReply{} }
func (m *SessionsReply) String() string { return proto.CompactTextString(m) }
func (*SessionsReply) ProtoMessage()    {}
func (*SessionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{6}
}
func (m *SessionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsReply.Merge(m, src)
}
func (m *SessionsReply) XXX_Size() int {
	return m.Size()
}
func (m *SessionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsReply proto.InternalMessageInfo

func (m *SessionsReply) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type LSPRequest struct {
	PccName              string   `protobuf:"bytes,1,opt,name=pccName,proto3" json:"pccName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LSPRequest) Reset()         { *m = LSPRequest{} }
func (m *LSPRequest) String() string { return proto.CompactTextString(m) }
func (*LSPRequest) ProtoMessage()    {}
func (*LSPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{7}
}
func (m *LSPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSPRequest.Merge(m, src)
}
func (m *LSPRequest) XXX_Size() int {
	return m.Size()
}
func (m *LSPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LSPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LSPRequest proto.InternalMessageInfo

func (m *LSPRequest) GetPccName() string {
	if m != nil {
		return m.PccName
	}
	return ""
}

type LSP struct {
	Delegate bool   `protobuf:"varint,1,opt,name=Delegate,proto3" json:"Delegate,omitempty"`
	Sync     bool   `protobuf:"varint,2,opt,name=Sync,proto3" json:"Sync,omitempty"`
	Remove   bool   `protobuf:"varint,3,opt,name=Remove,proto3" json:"Remove,omitempty"`
	Admin    bool   `protobuf:"varint,4,opt,name=Admin,proto3" json:"Admin,omitempty"`
	Oper     uint32 `protobuf:"varint,5,opt,name=Oper,proto3" json:"Oper,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Src      string `protobuf:"bytes,7,opt,name=Src,proto3" json:"Src,omitempty"`
	Dst      string `protobuf:"bytes,8,opt,name=Dst,proto3" json:"Dst,omitempty"`
	// EROList      []EROSub
	// SREROList    []*SREROSub
	// SRRROList    []*SRRROSub
	SetupPrio    uint32 `protobuf:"varint,9,opt,name=SetupPrio,proto3" json:"SetupPrio,omitempty"`
	HoldPrio     uint32 `protobuf:"varint,10,opt,name=HoldPrio,proto3" json:"HoldPrio,omitempty"`
	LocalProtect bool   `protobuf:"varint,11,opt,name=LocalProtect,proto3" json:"LocalProtect,omitempty"`
	BW           uint32 `protobuf:"varint,12,opt,name=BW,proto3" json:"BW,omitempty"`
	PLSPID       uint32 `protobuf:"varint,13,opt,name=PLSPID,proto3" json:"PLSPID,omitempty"`
	LSPID        uint32 `protobuf:"varint,14,opt,name=LSPID,proto3" json:"LSPID,omitempty"`
	// IPv4ID       *LSPIPv4Identifiers
	// IPv6ID       *LSPIPv6Identifiers
	SRPID                uint32   `protobuf:"varint,15,opt,name=SRPID,proto3" json:"SRPID,omitempty"`
	ExcludeAny           uint32   `protobuf:"varint,16,opt,name=ExcludeAny,proto3" json:"ExcludeAny,omitempty"`
	IncludeAny           uint32   `protobuf:"varint,17,opt,name=IncludeAny,proto3" json:"IncludeAny,omitempty"`
	IncludeAll           uint32   `protobuf:"varint,18,opt,name=IncludeAll,proto3" json:"IncludeAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LSP) Reset()         { *m = LSP{} }
func (m *LSP) String() string { return proto.CompactTextString(m) }
func (*LSP) ProtoMessage()    {}
func (*LSP) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{8}
}
func (m *LSP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSP.Merge(m, src)
}
func (m *LSP) XXX_Size() int {
	return m.Size()
}
func (m *LSP) XXX_DiscardUnknown() {
	xxx_messageInfo_LSP.DiscardUnknown(m)
}

var xxx_messageInfo_LSP proto.InternalMessageInfo

func (m *LSP) GetDelegate() bool {
	if m != nil {
		return m.Delegate
	}
	return false
}

func (m *LSP) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *LSP) GetRemove() bool {
	if m != nil {
		return m.Remove
	}
	return false
}

func (m *LSP) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *LSP) GetOper() uint32 {
	if m != nil {
		return m.Oper
	}
	return 0
}

func (m *LSP) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LSP) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *LSP) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *LSP) GetSetupPrio() uint32 {
	if m != nil {
		return m.SetupPrio
	}
	return 0
}

func (m *LSP) GetHoldPrio() uint32 {
	if m != nil {
		return m.HoldPrio
	}
	return 0
}

func (m *LSP) GetLocalProtect() bool {
	if m != nil {
		return m.LocalProtect
	}
	return false
}

func (m *LSP) GetBW() uint32 {
	if m != nil {
		return m.BW
	}
	return 0
}

func (m *LSP) GetPLSPID() uint32 {
	if m != nil {
		return m.PLSPID
	}
	return 0
}

func (m *LSP) GetLSPID() uint32 {
	if m != nil {
		return m.LSPID
	}
	return 0
}

func (m *LSP) GetSRPID() uint32 {
	if m != nil {
		return m.SRPID
	}
	return 0
}

func (m *LSP) GetExcludeAny() uint32 {
	if m != nil {
		return m.ExcludeAny
	}
	return 0
}

func (m *LSP) GetIncludeAny() uint32 {
	if m != nil {
		return m.IncludeAny
	}
	return 0
}

func (m *LSP) GetIncludeAll() uint32 {
	if m != nil {
		return m.IncludeAll
	}
	return 0
}

type LSPReply struct {
	LSPs                 []*LSP   `protobuf:"bytes,1,rep,name=LSPs,proto3" json:"LSPs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LSPReply) Reset()         { *m = LSPReply{} }
func (m *LSPReply) String() string { return proto.CompactTextString(m) }
func (*LSPReply) ProtoMessage()    {}
func (*LSPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{9}
}
func (m *LSPReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSPReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSPReply.Merge(m, src)
}
func (m *LSPReply) XXX_Size() int {
	return m.Size()
}
func (m *LSPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LSPReply.DiscardUnknown(m)
}

var xxx_messageInfo_LSPReply proto.InternalMessageInfo

func (m *LSPReply) GetLSPs() []*LSP {
	if m != nil {
		return m.LSPs
	}
	return nil
}

func init() {
	proto.RegisterType((*StartBGPRequest)(nil), "pceapiproto.StartBGPRequest")
	proto.RegisterType((*StartBGPReplay)(nil), "pceapiproto.StartBGPReplay")
	proto.RegisterType((*StopBGPRequest)(nil), "pceapiproto.StopBGPRequest")
	proto.RegisterType((*StopBGPReplay)(nil), "pceapiproto.StopBGPReplay")
	proto.RegisterType((*SessionsRequest)(nil), "pceapiproto.SessionsRequest")
	proto.RegisterType((*Session)(nil), "pceapiproto.Session")
	proto.RegisterType((*SessionsReply)(nil), "pceapiproto.SessionsReply")
	proto.RegisterType((*LSPRequest)(nil), "pceapiproto.LSPRequest")
	proto.RegisterType((*LSP)(nil), "pceapiproto.LSP")
	proto.RegisterType((*LSPReply)(nil), "pceapiproto.LSPReply")
}

func init() { proto.RegisterFile("pceapi.proto", fileDescriptor_614bac86d996c9a3) }

var fileDescriptor_614bac86d996c9a3 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x8a, 0xdb, 0x3c,
	0x14, 0x86, 0xc7, 0x71, 0x7e, 0x9c, 0x93, 0xc9, 0xcf, 0x88, 0xf9, 0xbe, 0x8a, 0xcc, 0x10, 0x82,
	0x29, 0x25, 0x50, 0x08, 0xc3, 0x74, 0xd9, 0x55, 0x12, 0x87, 0x34, 0x34, 0x6d, 0x8d, 0x5c, 0x18,
	0xe8, 0xce, 0xb5, 0xc5, 0x60, 0x50, 0x6c, 0xd5, 0x56, 0x86, 0xe6, 0x4e, 0xba, 0xe8, 0xa6, 0x97,
	0xd2, 0x5d, 0x97, 0xbd, 0x84, 0x92, 0xde, 0x48, 0x91, 0xe4, 0x38, 0xf1, 0x4c, 0x87, 0xae, 0xa2,
	0xf7, 0x79, 0x8f, 0x25, 0x9d, 0x93, 0xa3, 0x03, 0xa7, 0x3c, 0xa0, 0x3e, 0x8f, 0xc6, 0x3c, 0x4d,
	0x44, 0x82, 0x5a, 0x5a, 0x29, 0x61, 0x9f, 0x41, 0xd7, 0x13, 0x7e, 0x2a, 0xa6, 0x0b, 0x97, 0xd0,
	0x4f, 0x1b, 0x9a, 0x09, 0xbb, 0x07, 0x9d, 0x03, 0xe2, 0xcc, 0xdf, 0x6a, 0x92, 0xf0, 0xa3, 0x98,
	0x2e, 0xb4, 0x0b, 0xa2, 0x42, 0x9e, 0x43, 0xd7, 0xa3, 0x59, 0x16, 0x25, 0x71, 0x96, 0xc7, 0x20,
	0x0c, 0x0d, 0x1e, 0x04, 0x6f, 0xfd, 0x35, 0xc5, 0xc6, 0xd0, 0x18, 0x35, 0xc9, 0x5e, 0xda, 0xdf,
	0x0c, 0x68, 0xe4, 0xd1, 0xa8, 0x03, 0x95, 0xa5, 0x93, 0x07, 0x54, 0x96, 0x0e, 0xea, 0x83, 0xf5,
	0x26, 0xbb, 0x9d, 0x25, 0x9b, 0x58, 0xe0, 0xca, 0xd0, 0x18, 0x55, 0x49, 0xa1, 0xd1, 0x39, 0xd4,
	0x3c, 0xe1, 0x0b, 0x8a, 0xcd, 0xa1, 0x31, 0xaa, 0x11, 0x2d, 0xe4, 0x39, 0x7e, 0x18, 0xa6, 0x34,
	0xcb, 0x70, 0x55, 0x9f, 0x93, 0x4b, 0x74, 0x09, 0xcd, 0xd7, 0x94, 0x72, 0x9f, 0x45, 0x77, 0x14,
	0xd7, 0x86, 0xc6, 0xa8, 0x4d, 0x0e, 0x40, 0xba, 0x0e, 0xf5, 0xc3, 0xf7, 0xd1, 0x9a, 0xa6, 0xb8,
	0xae, 0xdd, 0x02, 0xd8, 0x13, 0x68, 0x1f, 0x12, 0xe2, 0x6c, 0x8b, 0xae, 0xc0, 0xca, 0x72, 0x80,
	0x8d, 0xa1, 0x39, 0x6a, 0x5d, 0x9f, 0x8f, 0x8f, 0x2a, 0x39, 0xce, 0xa3, 0x49, 0x11, 0x65, 0x3f,
	0x03, 0x58, 0x79, 0xee, 0xbf, 0xcb, 0xf1, 0xdd, 0x04, 0x73, 0xe5, 0xb9, 0x32, 0x75, 0x87, 0x32,
	0x7a, 0x2b, 0x33, 0x94, 0x21, 0x16, 0x29, 0x34, 0x42, 0x50, 0xf5, 0xb6, 0x71, 0xa0, 0x4a, 0x62,
	0x11, 0xb5, 0x46, 0xff, 0x43, 0x9d, 0xd0, 0x75, 0x72, 0xa7, 0xeb, 0x61, 0x91, 0x5c, 0xc9, 0x32,
	0x4d, 0xc2, 0x75, 0x14, 0xab, 0x72, 0x58, 0x44, 0x0b, 0xb9, 0xc3, 0x3b, 0x4e, 0xd3, 0xbc, 0x0e,
	0x6a, 0x2d, 0x99, 0xba, 0x50, 0x5d, 0x5d, 0x48, 0xad, 0x51, 0x0f, 0x4c, 0x2f, 0x0d, 0x70, 0x43,
	0x21, 0xb9, 0x94, 0xc4, 0xc9, 0x04, 0xb6, 0x34, 0x71, 0x32, 0x21, 0x4b, 0xe7, 0x51, 0xb1, 0xe1,
	0x6e, 0x1a, 0x25, 0xb8, 0xa9, 0x4b, 0x57, 0x00, 0x99, 0xc7, 0xab, 0x84, 0x85, 0xca, 0x04, 0x65,
	0x16, 0x1a, 0xd9, 0x70, 0xba, 0x4a, 0x02, 0x9f, 0xb9, 0x69, 0x22, 0x68, 0x20, 0x70, 0x4b, 0x5d,
	0xb1, 0xc4, 0x64, 0x4b, 0x4c, 0x6f, 0xf0, 0xa9, 0xfa, 0xb2, 0x32, 0xbd, 0x91, 0x79, 0xba, 0x2b,
	0xcf, 0x5d, 0x3a, 0xb8, 0xad, 0x58, 0xae, 0x64, 0x9e, 0x1a, 0x77, 0x14, 0xae, 0x15, 0xd4, 0x23,
	0x92, 0x76, 0x35, 0x55, 0x02, 0x0d, 0x00, 0xe6, 0x9f, 0x03, 0xb6, 0x09, 0xe9, 0x24, 0xde, 0xe2,
	0x9e, 0xb2, 0x8e, 0x88, 0xf4, 0x97, 0x71, 0xe1, 0x9f, 0x69, 0xff, 0x40, 0x8e, 0x7d, 0xc6, 0x30,
	0x2a, 0xfb, 0x8c, 0xd9, 0x57, 0x60, 0xa9, 0xff, 0x5a, 0x76, 0xca, 0x53, 0xa8, 0xae, 0x3c, 0x77,
	0xdf, 0x25, 0xbd, 0x52, 0x97, 0xc8, 0x20, 0xe5, 0x5e, 0x7f, 0xad, 0x80, 0xe9, 0xce, 0xe6, 0x68,
	0x09, 0xad, 0x05, 0x15, 0xfb, 0x5e, 0x43, 0x97, 0x7f, 0x6b, 0xaa, 0xfd, 0x9b, 0xea, 0xf7, 0x1f,
	0x71, 0x39, 0xdb, 0xda, 0x27, 0xe8, 0x25, 0x34, 0x16, 0x54, 0xc8, 0xdd, 0xd1, 0x93, 0x07, 0xa7,
	0xe6, 0x3b, 0xfc, 0xf7, 0xd0, 0xd0, 0x1f, 0x3b, 0xd0, 0xc8, 0x9f, 0x34, 0xba, 0x28, 0x9f, 0x52,
	0x7a, 0xfa, 0xf7, 0xaf, 0x50, 0x9a, 0x02, 0x27, 0x68, 0x01, 0xd6, 0x7e, 0x78, 0xdc, 0x4f, 0xa5,
	0x3c, 0x66, 0xfa, 0x17, 0x8f, 0xb8, 0x7a, 0xa3, 0xe9, 0xf8, 0xc7, 0x6e, 0x60, 0xfc, 0xdc, 0x0d,
	0x8c, 0x5f, 0xbb, 0x81, 0xf1, 0xe5, 0xf7, 0xe0, 0x04, 0x9a, 0x3c, 0xa0, 0x7a, 0x84, 0x4d, 0x2d,
	0x77, 0x36, 0x97, 0xdd, 0x92, 0xb8, 0xc6, 0x87, 0x9a, 0x42, 0x1f, 0xeb, 0xea, 0xe7, 0xc5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x19, 0xf4, 0x9d, 0xec, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PCEClient is the client API for PCE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PCEClient interface {
	GetSessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error)
	GetLSPs(ctx context.Context, in *LSPRequest, opts ...grpc.CallOption) (*LSPReply, error)
	StopBGP(ctx context.Context, in *StopBGPRequest, opts ...grpc.CallOption) (*StopBGPReplay, error)
	StartBGP(ctx context.Context, in *StartBGPRequest, opts ...grpc.CallOption) (*StartBGPReplay, error)
}

type pCEClient struct {
	cc *grpc.ClientConn
}

func NewPCEClient(cc *grpc.ClientConn) PCEClient {
	return &pCEClient{cc}
}

func (c *pCEClient) GetSessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error) {
	out := new(SessionsReply)
	err := c.cc.Invoke(ctx, "/pceapiproto.PCE/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCEClient) GetLSPs(ctx context.Context, in *LSPRequest, opts ...grpc.CallOption) (*LSPReply, error) {
	out := new(LSPReply)
	err := c.cc.Invoke(ctx, "/pceapiproto.PCE/GetLSPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCEClient) StopBGP(ctx context.Context, in *StopBGPRequest, opts ...grpc.CallOption) (*StopBGPReplay, error) {
	out := new(StopBGPReplay)
	err := c.cc.Invoke(ctx, "/pceapiproto.PCE/StopBGP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCEClient) StartBGP(ctx context.Context, in *StartBGPRequest, opts ...grpc.CallOption) (*StartBGPReplay, error) {
	out := new(StartBGPReplay)
	err := c.cc.Invoke(ctx, "/pceapiproto.PCE/StartBGP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PCEServer is the server API for PCE service.
type PCEServer interface {
	GetSessions(context.Context, *SessionsRequest) (*SessionsReply, error)
	GetLSPs(context.Context, *LSPRequest) (*LSPReply, error)
	StopBGP(context.Context, *StopBGPRequest) (*StopBGPReplay, error)
	StartBGP(context.Context, *StartBGPRequest) (*StartBGPReplay, error)
}

// UnimplementedPCEServer can be embedded to have forward compatible implementations.
type UnimplementedPCEServer struct {
}

func (*UnimplementedPCEServer) GetSessions(ctx context.Context, req *SessionsRequest) (*SessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (*UnimplementedPCEServer) GetLSPs(ctx context.Context, req *LSPRequest) (*LSPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLSPs not implemented")
}
func (*UnimplementedPCEServer) StopBGP(ctx context.Context, req *StopBGPRequest) (*StopBGPReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBGP not implemented")
}
func (*UnimplementedPCEServer) StartBGP(ctx context.Context, req *StartBGPRequest) (*StartBGPReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBGP not implemented")
}

func RegisterPCEServer(s *grpc.Server, srv PCEServer) {
	s.RegisterService(&_PCE_serviceDesc, srv)
}

func _PCE_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCEServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceapiproto.PCE/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCEServer).GetSessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCE_GetLSPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCEServer).GetLSPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceapiproto.PCE/GetLSPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCEServer).GetLSPs(ctx, req.(*LSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCE_StopBGP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBGPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCEServer).StopBGP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceapiproto.PCE/StopBGP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCEServer).StopBGP(ctx, req.(*StopBGPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCE_StartBGP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBGPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCEServer).StartBGP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceapiproto.PCE/StartBGP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCEServer).StartBGP(ctx, req.(*StartBGPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pceapiproto.PCE",
	HandlerType: (*PCEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _PCE_GetSessions_Handler,
		},
		{
			MethodName: "GetLSPs",
			Handler:    _PCE_GetLSPs_Handler,
		},
		{
			MethodName: "StopBGP",
			Handler:    _PCE_StopBGP_Handler,
		},
		{
			MethodName: "StartBGP",
			Handler:    _PCE_StartBGP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pceapi.proto",
}

func (m *StartBGPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBGPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBGPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StartBGPReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBGPReplay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBGPReplay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StopBGPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopBGPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopBGPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StopBGPReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopBGPReplay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopBGPReplay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PccName) > 0 {
		i -= len(m.PccName)
		copy(dAtA[i:], m.PccName)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.PccName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeadTimer != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.DeadTimer))
		i--
		dAtA[i] = 0x30
	}
	if m.Keepalive != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.Keepalive))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgCount != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.MsgCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPceapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LSPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PccName) > 0 {
		i -= len(m.PccName)
		copy(dAtA[i:], m.PccName)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.PccName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LSP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncludeAll != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.IncludeAll))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IncludeAny != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.IncludeAny))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ExcludeAny != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.ExcludeAny))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SRPID != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.SRPID))
		i--
		dAtA[i] = 0x78
	}
	if m.LSPID != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.LSPID))
		i--
		dAtA[i] = 0x70
	}
	if m.PLSPID != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.PLSPID))
		i--
		dAtA[i] = 0x68
	}
	if m.BW != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.BW))
		i--
		dAtA[i] = 0x60
	}
	if m.LocalProtect {
		i--
		if m.LocalProtect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.HoldPrio != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.HoldPrio))
		i--
		dAtA[i] = 0x50
	}
	if m.SetupPrio != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.SetupPrio))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Dst) > 0 {
		i -= len(m.Dst)
		copy(dAtA[i:], m.Dst)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.Dst)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Src) > 0 {
		i -= len(m.Src)
		copy(dAtA[i:], m.Src)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.Src)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.Oper != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.Oper))
		i--
		dAtA[i] = 0x28
	}
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Remove {
		i--
		if m.Remove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Delegate {
		i--
		if m.Delegate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LSPReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSPReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSPReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LSPs) > 0 {
		for iNdEx := len(m.LSPs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LSPs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPceapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPceapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPceapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StartBGPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartBGPReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopBGPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopBGPReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PccName)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.MsgCount != 0 {
		n += 1 + sovPceapi(uint64(m.MsgCount))
	}
	if m.State != 0 {
		n += 1 + sovPceapi(uint64(m.State))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.Keepalive != 0 {
		n += 1 + sovPceapi(uint64(m.Keepalive))
	}
	if m.DeadTimer != 0 {
		n += 1 + sovPceapi(uint64(m.DeadTimer))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovPceapi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LSPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PccName)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LSP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate {
		n += 2
	}
	if m.Sync {
		n += 2
	}
	if m.Remove {
		n += 2
	}
	if m.Admin {
		n += 2
	}
	if m.Oper != 0 {
		n += 1 + sovPceapi(uint64(m.Oper))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	l = len(m.Src)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.SetupPrio != 0 {
		n += 1 + sovPceapi(uint64(m.SetupPrio))
	}
	if m.HoldPrio != 0 {
		n += 1 + sovPceapi(uint64(m.HoldPrio))
	}
	if m.LocalProtect {
		n += 2
	}
	if m.BW != 0 {
		n += 1 + sovPceapi(uint64(m.BW))
	}
	if m.PLSPID != 0 {
		n += 1 + sovPceapi(uint64(m.PLSPID))
	}
	if m.LSPID != 0 {
		n += 1 + sovPceapi(uint64(m.LSPID))
	}
	if m.SRPID != 0 {
		n += 1 + sovPceapi(uint64(m.SRPID))
	}
	if m.ExcludeAny != 0 {
		n += 2 + sovPceapi(uint64(m.ExcludeAny))
	}
	if m.IncludeAny != 0 {
		n += 2 + sovPceapi(uint64(m.IncludeAny))
	}
	if m.IncludeAll != 0 {
		n += 2 + sovPceapi(uint64(m.IncludeAll))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LSPReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LSPs) > 0 {
		for _, e := range m.LSPs {
			l = e.Size()
			n += 1 + l + sovPceapi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPceapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPceapi(x uint64) (n int) {
	return sovPceapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartBGPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBGPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBGPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartBGPReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBGPReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBGPReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopBGPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopBGPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopBGPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopBGPReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopBGPReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopBGPReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PccName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PccName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCount", wireType)
			}
			m.MsgCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keepalive", wireType)
			}
			m.Keepalive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keepalive |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadTimer", wireType)
			}
			m.DeadTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadTimer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &Session{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PccName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PccName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delegate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Remove = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oper", wireType)
			}
			m.Oper = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oper |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Src = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrio", wireType)
			}
			m.SetupPrio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetupPrio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldPrio", wireType)
			}
			m.HoldPrio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldPrio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalProtect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalProtect = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BW", wireType)
			}
			m.BW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BW |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PLSPID", wireType)
			}
			m.PLSPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PLSPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LSPID", wireType)
			}
			m.LSPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LSPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SRPID", wireType)
			}
			m.SRPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SRPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeAny", wireType)
			}
			m.ExcludeAny = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcludeAny |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeAny", wireType)
			}
			m.IncludeAny = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncludeAny |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeAll", wireType)
			}
			m.IncludeAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncludeAll |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSPReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSPReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSPReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LSPs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LSPs = append(m.LSPs, &LSP{})
			if err := m.LSPs[len(m.LSPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPceapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPceapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPceapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPceapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPceapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPceapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPceapi = fmt.Errorf("proto: unexpected end of group")
)
