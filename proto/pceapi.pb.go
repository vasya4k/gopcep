// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pceapi.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type SessionsRequest struct {
	PccName              string   `protobuf:"bytes,1,opt,name=pccName,proto3" json:"pccName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionsRequest) Reset()         { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()    {}
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{0}
}
func (m *SessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsRequest.Merge(m, src)
}
func (m *SessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsRequest proto.InternalMessageInfo

func (m *SessionsRequest) GetPccName() string {
	if m != nil {
		return m.PccName
	}
	return ""
}

type Session struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MsgCount             uint64   `protobuf:"varint,2,opt,name=MsgCount,proto3" json:"MsgCount,omitempty"`
	State                int32    `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Keepalive            uint32   `protobuf:"varint,5,opt,name=Keepalive,proto3" json:"Keepalive,omitempty"`
	DeadTimer            uint32   `protobuf:"varint,6,opt,name=DeadTimer,proto3" json:"DeadTimer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{1}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Session) GetMsgCount() uint64 {
	if m != nil {
		return m.MsgCount
	}
	return 0
}

func (m *Session) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Session) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Session) GetKeepalive() uint32 {
	if m != nil {
		return m.Keepalive
	}
	return 0
}

func (m *Session) GetDeadTimer() uint32 {
	if m != nil {
		return m.DeadTimer
	}
	return 0
}

// The response message containing the greetings
type SessionsReply struct {
	Sessions             []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SessionsReply) Reset()         { *m = SessionsReply{} }
func (m *SessionsReply) String() string { return proto.CompactTextString(m) }
func (*SessionsReply) ProtoMessage()    {}
func (*SessionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_614bac86d996c9a3, []int{2}
}
func (m *SessionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsReply.Merge(m, src)
}
func (m *SessionsReply) XXX_Size() int {
	return m.Size()
}
func (m *SessionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsReply proto.InternalMessageInfo

func (m *SessionsReply) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionsRequest)(nil), "pceapiproto.SessionsRequest")
	proto.RegisterType((*Session)(nil), "pceapiproto.Session")
	proto.RegisterType((*SessionsReply)(nil), "pceapiproto.SessionsReply")
}

func init() { proto.RegisterFile("pceapi.proto", fileDescriptor_614bac86d996c9a3) }

var fileDescriptor_614bac86d996c9a3 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0x3b, 0x6d, 0xd3, 0x8f, 0xdb, 0x7f, 0xff, 0xc2, 0xd0, 0xc5, 0x50, 0x4a, 0x08, 0x59,
	0x05, 0x84, 0x20, 0xf5, 0x09, 0x6c, 0x53, 0x24, 0x88, 0x12, 0xa6, 0xae, 0xdc, 0x8d, 0xc9, 0x45,
	0x02, 0x69, 0x33, 0x66, 0xa6, 0x42, 0xdf, 0xc4, 0xad, 0x6f, 0xe3, 0xd2, 0x47, 0x90, 0xf8, 0x22,
	0x92, 0xcf, 0xba, 0xd0, 0xd5, 0xcc, 0xef, 0x9c, 0x33, 0x73, 0x99, 0x33, 0xf0, 0x4f, 0x86, 0x28,
	0x64, 0xec, 0xca, 0x2c, 0xd5, 0x29, 0x9d, 0x54, 0x54, 0x82, 0x7d, 0x0e, 0x67, 0x5b, 0x54, 0x2a,
	0x4e, 0xf7, 0x8a, 0xe3, 0xf3, 0x01, 0x95, 0xa6, 0x0c, 0x86, 0x32, 0x0c, 0xef, 0xc4, 0x0e, 0x19,
	0xb1, 0x88, 0x33, 0xe6, 0x0d, 0xda, 0x6f, 0x04, 0x86, 0x75, 0x9a, 0xfe, 0x87, 0xae, 0xef, 0xd5,
	0x81, 0xae, 0xef, 0xd1, 0x39, 0x8c, 0x6e, 0xd5, 0xd3, 0x3a, 0x3d, 0xec, 0x35, 0xeb, 0x5a, 0xc4,
	0xe9, 0xf3, 0x96, 0xe9, 0x0c, 0x8c, 0xad, 0x16, 0x1a, 0x59, 0xcf, 0x22, 0x8e, 0xc1, 0x2b, 0x28,
	0xe6, 0x88, 0x28, 0xca, 0x50, 0x29, 0xd6, 0xaf, 0xe6, 0xd4, 0x48, 0x17, 0x30, 0xbe, 0x41, 0x94,
	0x22, 0x89, 0x5f, 0x90, 0x19, 0x16, 0x71, 0xa6, 0xfc, 0x24, 0x14, 0xae, 0x87, 0x22, 0xba, 0x8f,
	0x77, 0x98, 0xb1, 0x41, 0xe5, 0xb6, 0x82, 0x7d, 0x05, 0xd3, 0xd3, 0x83, 0x64, 0x72, 0xa4, 0x17,
	0x30, 0x52, 0xb5, 0xc0, 0x88, 0xd5, 0x73, 0x26, 0xcb, 0x99, 0xfb, 0xa3, 0x01, 0xb7, 0x4e, 0xf3,
	0x36, 0xb5, 0x0c, 0xa0, 0x17, 0xac, 0x37, 0xd4, 0x87, 0xc9, 0x35, 0xea, 0xe6, 0x32, 0xba, 0xf8,
	0xed, 0x54, 0x53, 0xda, 0x7c, 0xfe, 0x87, 0x2b, 0x93, 0xa3, 0xdd, 0x59, 0xb9, 0xef, 0xb9, 0x49,
	0x3e, 0x72, 0x93, 0x7c, 0xe6, 0x26, 0x79, 0xfd, 0x32, 0x3b, 0x30, 0x96, 0x21, 0x56, 0xff, 0xb1,
	0x1a, 0x05, 0xeb, 0x4d, 0x50, 0xec, 0x02, 0xf2, 0x60, 0x94, 0xd2, 0xe3, 0xa0, 0x5c, 0x2e, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xdb, 0xf7, 0xa0, 0xb9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PCEClient is the client API for PCE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PCEClient interface {
	// Sends a greeting
	GetSessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error)
}

type pCEClient struct {
	cc *grpc.ClientConn
}

func NewPCEClient(cc *grpc.ClientConn) PCEClient {
	return &pCEClient{cc}
}

func (c *pCEClient) GetSessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsReply, error) {
	out := new(SessionsReply)
	err := c.cc.Invoke(ctx, "/pceapiproto.PCE/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PCEServer is the server API for PCE service.
type PCEServer interface {
	// Sends a greeting
	GetSessions(context.Context, *SessionsRequest) (*SessionsReply, error)
}

// UnimplementedPCEServer can be embedded to have forward compatible implementations.
type UnimplementedPCEServer struct {
}

func (*UnimplementedPCEServer) GetSessions(ctx context.Context, req *SessionsRequest) (*SessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}

func RegisterPCEServer(s *grpc.Server, srv PCEServer) {
	s.RegisterService(&_PCE_serviceDesc, srv)
}

func _PCE_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCEServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceapiproto.PCE/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCEServer).GetSessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pceapiproto.PCE",
	HandlerType: (*PCEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _PCE_GetSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pceapi.proto",
}

func (m *SessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PccName) > 0 {
		i -= len(m.PccName)
		copy(dAtA[i:], m.PccName)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.PccName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeadTimer != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.DeadTimer))
		i--
		dAtA[i] = 0x30
	}
	if m.Keepalive != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.Keepalive))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgCount != 0 {
		i = encodeVarintPceapi(dAtA, i, uint64(m.MsgCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintPceapi(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPceapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPceapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPceapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PccName)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.MsgCount != 0 {
		n += 1 + sovPceapi(uint64(m.MsgCount))
	}
	if m.State != 0 {
		n += 1 + sovPceapi(uint64(m.State))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPceapi(uint64(l))
	}
	if m.Keepalive != 0 {
		n += 1 + sovPceapi(uint64(m.Keepalive))
	}
	if m.DeadTimer != 0 {
		n += 1 + sovPceapi(uint64(m.DeadTimer))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovPceapi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPceapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPceapi(x uint64) (n int) {
	return sovPceapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PccName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PccName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCount", wireType)
			}
			m.MsgCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keepalive", wireType)
			}
			m.Keepalive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keepalive |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadTimer", wireType)
			}
			m.DeadTimer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadTimer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPceapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPceapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &Session{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPceapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPceapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPceapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPceapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPceapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPceapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPceapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPceapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPceapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPceapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPceapi = fmt.Errorf("proto: unexpected end of group")
)
